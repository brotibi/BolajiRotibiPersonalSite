{"ast":null,"code":"\"use strict\";\n\nvar Environment = require('./Environment');\n/**\n * Routing environment which routes by `location.pathname`.\n */\n\n\nfunction PathnameEnvironment() {\n  this.onPopState = this.onPopState.bind(this);\n  this.useHistoryApi = !!(window.history && window.history.pushState && window.history.replaceState);\n  Environment.call(this);\n}\n\nPathnameEnvironment.prototype = Object.create(Environment.prototype);\nPathnameEnvironment.prototype.constructor = PathnameEnvironment;\n\nPathnameEnvironment.prototype.getPath = function () {\n  return window.location.pathname + window.location.search;\n};\n\nPathnameEnvironment.prototype.pushState = function (path, navigation) {\n  if (this.useHistoryApi) {\n    window.history.pushState({}, '', path);\n  } else {\n    window.location.pathname = path;\n  }\n};\n\nPathnameEnvironment.prototype.replaceState = function (path, navigation) {\n  if (this.useHistoryApi) {\n    window.history.replaceState({}, '', path);\n  } else {\n    window.location.pathname = path;\n  }\n};\n\nPathnameEnvironment.prototype.start = function () {\n  if (this.useHistoryApi && window.addEventListener) {\n    window.addEventListener('popstate', this.onPopState);\n  }\n};\n\nPathnameEnvironment.prototype.stop = function () {\n  if (this.useHistoryApi && window.removeEventListener) {\n    window.removeEventListener('popstate', this.onPopState);\n  }\n};\n\nPathnameEnvironment.prototype.onPopState = function (e) {\n  var path = window.location.pathname;\n\n  if (this.path !== path) {\n    this.setPath(path, {\n      isPopState: true\n    });\n  }\n};\n\nmodule.exports = PathnameEnvironment;","map":null,"metadata":{},"sourceType":"script"}