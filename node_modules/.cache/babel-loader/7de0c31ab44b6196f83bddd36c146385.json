{"ast":null,"code":"\"use strict\"; // batchedUpdates is now exposed in 0.12\n\nvar batchedUpdates = require(\"react-dom\").unstable_batchedUpdates || require('react').batchedUpdates;\n/**\n * Base abstract class for a routing environment.\n *\n * @private\n */\n\n\nfunction Environment() {\n  this.routers = [];\n  this.path = this.getPath();\n}\n/**\n * Notify routers about the change.\n *\n * @param {Object} navigation\n * @param {Function} cb\n */\n\n\nEnvironment.prototype.notify = function notify(navigation, cb) {\n  var latch = this.routers.length;\n\n  if (latch === 0) {\n    return cb && cb();\n  }\n\n  function callback() {\n    latch -= 1;\n\n    if (cb && latch === 0) {\n      cb();\n    }\n  }\n\n  batchedUpdates(function () {\n    for (var i = 0, len = this.routers.length; i < len; i++) {\n      this.routers[i].setPath(this.path, navigation, callback);\n    }\n  }.bind(this));\n};\n\nEnvironment.prototype.makeHref = function makeHref(path) {\n  return path;\n};\n\nEnvironment.prototype.navigate = function navigate(path, navigation, cb) {\n  return this.setPath(path, navigation, cb);\n};\n\nEnvironment.prototype.setPath = function (path, navigation, cb) {\n  // Support (path, cb) arity.\n  if (typeof navigation === 'function' && cb === undefined) {\n    cb = navigation;\n    navigation = {};\n  } // Support (path) arity.\n\n\n  if (!navigation) navigation = {};\n\n  if (!navigation.isPopState) {\n    if (navigation.replace) {\n      this.replaceState(path, navigation);\n    } else {\n      this.pushState(path, navigation);\n    }\n  }\n\n  this.path = path;\n  this.notify(navigation, cb);\n};\n/**\n * Register router with an environment.\n */\n\n\nEnvironment.prototype.register = function register(router) {\n  if (this.routers.length === 0) {\n    this.start();\n  }\n\n  this.routers.push(router);\n};\n/**\n * Unregister router from an environment.\n */\n\n\nEnvironment.prototype.unregister = function unregister(router) {\n  if (this.routers.indexOf(router) > -1) {\n    this.routers.splice(this.routers.indexOf(router), 1);\n  }\n\n  if (this.routers.length === 0) {\n    this.stop();\n  }\n};\n\nmodule.exports = Environment;","map":null,"metadata":{},"sourceType":"script"}