{"ast":null,"code":"\"use strict\";\n/**\n * Routing environment.\n *\n * It specifies how routers read its state from DOM and synchronise it back.\n */\n\nvar canUseDOM = !!(typeof window !== 'undefined' && window.document && window.document.createElement);\n\nvar DummyEnvironment = require('./DummyEnvironment');\n\nvar Environment = require('./Environment');\n/**\n * Mixin for routes to keep attached to an environment.\n *\n * This mixin assumes the environment is passed via props.\n */\n\n\nvar Mixin = {\n  componentDidMount: function () {\n    this.getEnvironment().register(this);\n  },\n  componentWillUnmount: function () {\n    this.getEnvironment().unregister(this);\n  }\n};\nvar PathnameEnvironment;\nvar HashEnvironment;\nvar pathnameEnvironment;\nvar hashEnvironment;\nvar defaultEnvironment;\nvar dummyEnvironment;\n\nif (canUseDOM) {\n  PathnameEnvironment = require('./PathnameEnvironment');\n  HashEnvironment = require('./HashEnvironment');\n  pathnameEnvironment = new PathnameEnvironment();\n  hashEnvironment = new HashEnvironment();\n  defaultEnvironment = window.history !== undefined && window.history.pushState !== undefined ? pathnameEnvironment : hashEnvironment;\n} else {\n  dummyEnvironment = new DummyEnvironment();\n  pathnameEnvironment = dummyEnvironment;\n  hashEnvironment = dummyEnvironment;\n  defaultEnvironment = dummyEnvironment;\n}\n\nmodule.exports = {\n  pathnameEnvironment: pathnameEnvironment,\n  hashEnvironment: hashEnvironment,\n  defaultEnvironment: defaultEnvironment,\n  dummyEnvironment: dummyEnvironment,\n  Environment: Environment,\n  PathnameEnvironment: PathnameEnvironment,\n  HashEnvironment: HashEnvironment,\n  Mixin: Mixin\n};","map":null,"metadata":{},"sourceType":"script"}